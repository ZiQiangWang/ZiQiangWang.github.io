<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[实现三方库按需引入与多主题方案]]></title>
    <url>%2F2018%2F08%2F31%2F%E5%AE%9E%E7%8E%B0%E4%B8%89%E6%96%B9%E5%BA%93%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E4%B8%8E%E5%A4%9A%E4%B8%BB%E9%A2%98%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[300KB的三方库，在移动端，是庞然大物的大。 最近基于vue写了一堆移动端组件，本地demo运行无误，但是终究是要提供给别人使用。使用的方式就有待商榷，第一，可以直接在入口处引入并注册封装好的全部组件，项目所有位置可以直接使用。第二，提供按需引入的方式，用啥引入啥。 引入方案完整引入 123import Vue from 'vue';import Sky from "sky";Vue.use(Sky); 按需引入 123import Vue from 'vue';import &#123; Button &#125; from 'sky';Vue.component(Button.name, Button); 在实现按需引入时，需要使用babel-plugin-component， 1npm install babel-plugin-component -D 修改.babelrc 123456789101112&#123; ...其他配置 "plugins": [ [ "component", &#123; "libraryName": "sky", "styleLibraryName": "theme-light" &#125; ] ]&#125; 这种引入方式，对于生成的最终lib的目录结构有要求，因为插件babel-plugin-component本质上是做了下面的工作，将 1import &#123; Button &#125; from 'sky' 转为： 12var button = require('sky/lib/button')require('sky/lib/button/style.css') 而通过指定styleLibraryName 配置，可以设置样式文件的目录，变成如下形式： 12var button = require('sky/lib/button')require('sky/lib/styleLibraryName/button.css') 因此，生成的lib结构如下所示： 12345678910111213- lib - theme-light // &apos;styleLibraryName&apos; - base.css // required - index.css // required - button.css - input.css - ... - theme-dark - ... - index.js - button.js - input.js - ... 其中，theme-light和theme-dark是针对组件库的不同主题，生成的具有相同结构的目录。目录中base.css用于按需引入时，共有的样式文件，index.less是在整体引入时使用。 lib目录下的index.js用于整体引入，各个组件的js文件用于按需引入。这样，就可以完成两种方式引入了。 生成目录结构与按需引入方案相匹配的目录结构，需要通过打包工具来生成。我的项目中，每个组件都是单文件组件，template、script、style混合在一起。通过webpack来生成对应的结构。 webpack支持多个entry打包，因此，通过脚本生成如下结构的文件，分别指定每个组件的名字，以及对应的路径。其中index是所有组件的汇总。 1234567module.exports = &#123; "index": "./packages/index.js", "button": "./packages/button/index.js", "input": "./packages/input/index.js", ... "base.js": "./packages/base/index.js",&#125; 在webpack.config.js中，将entry设置成为上述对象，则可以统一打包多个组件，以及对应的样式文件。 因为使用的是webpack4，因此css的提取插件使用的是mini-css-extract-plugin，通过指定filename，可以确定输出的样式文件的名字以及路径。 因为要生成一个base.css文件，因此额外定义了一个空组件base，只负责引入共有的样式，这样也可以自动生成base.css文件。 多主题生成通常，组件的共有样式可以调整，通过覆盖一些基础样式变量，以及图片资源，达到切换主题的目的。 我采用的是less，预定义了theme相关变量在一个文件中，切换主题可以通过切换这个文件来实现。但是如何在一次构建中，同时生成多套主题，是一件比较麻烦的事。 我采用了如下方案： 定义主题颜色变量定义了light和dark两个主题，使用相同的变量，规范两种主题下的不同颜色、阴影、渐变、计算规则等。分别命名为light.less和dark.less，不同主题对应的资源文件，位于指定位置的不同命名的文件夹下，使用相同的方式导入。 定义webpack配置文件配置文件本身可以定义为一个函数，接受参数，返回配置的对象。因此，定义为如下形式： 123456789101112131415161718192021222324252627module.exports = (theme) =&gt; &#123; return &#123; module: &#123; rules: [ &#123; test: /\.(png|jpe?g|svg)(\?.*)?$/, loader: 'url-loader', options: &#123; limit: 10000, name: `theme-$&#123;theme&#125;/images/[name].[ext]` &#125; &#125;, ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: `theme-$&#123;theme&#125;/[name].css`, &#125;), ], resolve: &#123; alias: &#123; 'themes': resolve(`styles/themes/$&#123;theme&#125;.less`), &#125; &#125; &#125;&#125; 在这个配置中，所有与主题相关的资源，通过传入的theme变量，最终输出到指定的主题文件夹下。其中，还要记得定义themes的别名，为对应的主题文件名称。这样，在其他文件中使用该主题变量，可以使用下面方式引入，打包时，切换theme名字，则可以获得不同的主题样式文件。 123&lt;style lang=&quot;less&quot;&gt; @import &quot;~themes&quot;;&lt;/stlye&gt; 多次打包在打包时，想在一次打包过程中同时生成两份主题文件目录比较麻烦，因此通过打包两次的方式。因为js文件在这个过程中不会改变，通过修改theme，可以生成多个主题文件夹。 12345678const webpack = require('webpack');const webpackConfig = require('./webpack.prod.conf');const themes = ['light', 'dark'];themes.forEach(theme =&gt; &#123; webpack(webpackConfig(theme), (err, stats) =&gt; &#123; &#125;);&#125;) 主题切换在使用时，想要切换主题，只需要修改.babelrc中的配置即可，例如：将styleLibraryName改为theme-dark 123456789101112&#123; ...其他配置 "plugins": [ [ "component", &#123; "libraryName": "sky", "styleLibraryName": "theme-dark" &#125; ] ]&#125;]]></content>
      <categories>
        <category>开源</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端rem布局解决方案]]></title>
    <url>%2F2018%2F08%2F30%2F%E7%A7%BB%E5%8A%A8%E7%AB%AFrem%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[在移动端自适应方面，百分比布局有其局限性，媒体查询又太过繁琐，vw方案过于激进，说到底，还是rem敦实可靠。 在文章使用Flexible实现手淘H5页面的终端适配中，讲述了rem布局的方案。但是这种修改viewpoint的方案，也存在一些局限性，比如三方库的显示异常等。到后来，在flexible2.0中，已经放弃了这种hack行为，直接设置html的font-size完事。 为了节省体力，官方推出了px2rem以及对应的postcss-px2rem，结合脚手架工具，直接在代码中写px单位即可，工具会自动帮你转为rem。 但是在新的条件下，这两个工具存在一些问题。flexible2.0中，已经不会对viewopint进行修改，因此不需要针对多种dpr设置多个字体，因此下面这种转换就变得毫无必要。 123456.selector &#123; width: 150px; height: 64px; /*px*/ font-size: 28px; /*px*/ border: 1px solid #ddd; /*no*/&#125; 12345678910111213141516.selector &#123; width: 2rem; border: 1px solid #ddd;&#125;[data-dpr="1"] .selector &#123; height: 32px; font-size: 14px;&#125;[data-dpr="2"] .selector &#123; height: 64px; font-size: 28px;&#125;[data-dpr="3"] .selector &#123; height: 96px; font-size: 42px;&#125; 我们需要的是，设置一个font-size，并且确保其不会被转换为rem单位即可。 按照原有的px2rem规则，要达到这种效果，需要按照以下写法： 123.selector &#123; font-size: 28px; /*no*/&#125; 但是这种写法比较麻烦，并且可能出现疏漏。因此在px2rem基础上，开发了px2rem-more，设置keepFontSize属性，且默认为true，不会对font-size进行转换。 再者，postcss-px2rem在进行转换时，会将三方库中的px单位进行转换，在使用第三方的组件库时，会导致尺寸异常。因此，在插件postcss-px2rem-exclude基础上，将内置px2rem替换为px2rem-more，开发了postcss-px2rem-more，添加exclude配置项，用来排除不进行转换的三方库。 结论最终解决方案如下： 使用flexible2.0 三方组件库使用px作为单位 项目本身通过postcss-px2rem-more，将px转为rem，且保持字体不变]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>h5</tag>
        <tag>移动端</tag>
        <tag>工具开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1px细线终极解决方案]]></title>
    <url>%2F2018%2F08%2F24%2F1px%E7%BB%86%E7%BA%BF%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[问：为什么要实现1px细线？ 答：颜值即正义 &emsp;&emsp;现有的解决方案有很多，各有优劣，很多文章也只是简单罗列了各种实现方式，告诉你说在合适的场景使用合适的方法，或者说结合使用。本文参考文章《再谈Retina下1px的解决方案》中的讨论，给出了目前最合适的兼容ios和安卓的方法。 由于ios版本的推进，支持到ios8已经是可以接受的事了，可以充分利用ios8及以上支持0.5px的特性。 判断0.5px支持首先判断当前设备对于0.5px的支持，有两种方案： 一是判断设备类型，对于ios8以及以上，测认为支持0.5px。 12345678if (/iP(hone|od|ad)/.test(navigator.userAgent)) &#123; const v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/); const version = parseInt(v[1], 10); if (version &gt;= 8) &#123; document.documentElement.classList.add('hairlines'); &#125;&#125; 还有另外一种方案，经测试，在某些安卓机型上检测有误，可能是计算精度导致。 123456789if (window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2) &#123; var testElem = document.createElement('div'); testElem.style.border = '.5px solid transparent'; document.body.appendChild(testElem); if (testElem.offsetHeight == 1)&#123; document.querySelector('html').classList.add('hairlines'); &#125; document.body.removeChild(testElem);&#125; 为了确保准确性，所有的ios版本大于8.0的设备，使用0.5px方案，所有安卓机使用border-image方案。当然，ios8以下的设备也可以兼容。 postcss-write-svgpostcss-write-svg插件支持通过css的方式绘制svg，可以自由的定义颜色和尺寸。将定义的svg用于border-image 1234567891011121314151617181920@svg square &#123; @rect &#123; fill: none; // content为透明 width: 100%; height: 100%; stroke-width: 2; stroke: var(--color, @bg_line); // 颜色 &#125;&#125;.one-pixel &#123; border: 1px solid transparent; border-image: svg(square) 2 2 stretch;&#125;.hairlines &#123; .one-pixel &#123; border-image: none; border: 0.5px solid @bg_line; &#125;&#125;]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>h5</tag>
        <tag>移动端</tag>
        <tag>兼容</tag>
      </tags>
  </entry>
</search>
